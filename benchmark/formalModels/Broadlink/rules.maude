load ../lib/Iot .
mod SYSTEM is
protecting Iot .
eq init = idle @ < system | ('counter' : 0) > < userA | ('key' : nils , 'localTo' : deviceB , 'members' : nils) > < userC | ('key' : nils , 'localTo' : nils , 'members' : nils) > < deviceB | ('key' : 'secret' , 'unlocked' : true) > < cloudA | (deviceB : ('owner' : nils , 'key' : 'secret') , userA : ('devices' : nils , 'members' : nils) , userC : ('devices' : nils , 'members' : nils)) > .

vars .. ... .... ..... ...... ....... : Set .

*** variables
vars N : Nat .
vars UserX : User .
vars KeyA : Qid .
vars SetA : Set .
vars DeviceY : Device .
vars FreshKeyB : Qid .
vars UserY : User .
*** policy
eq < UserX | ('localTo' : nils , ..) > $ UserX 'approaches' DeviceY 
= < UserX | ('localTo' : DeviceY , ..) > .
eq < UserX | ('localTo' : DeviceY , ..) > $ UserX 'leaves' DeviceY 
= < UserX | ('localTo' : nils , ..) > .
eq < system | ('counter' : N , ..) > < DeviceY | ('key' : KeyA , ...) > $ UserX 'pressButton' DeviceY 
= < system | ('counter' : N + 1 , ..) > < DeviceY | ('key' : randomStr('KeyB', N) , ...) > .
eq < DeviceY | ('key' : KeyA , 'unlocked' : true , ..) > < UserX | ('key' : nils , ...) > $ UserX 'callAPI:getKey' DeviceY 
= < DeviceY | ('key' : KeyA , 'unlocked' : true , ..) > < UserX | ('key' : KeyA , ...) > .
eq < DeviceY | ('key' : KeyA , 'unlocked' : true , ..) > $ UserX 'callAPI:lock' DeviceY | (KeyA) 
= < DeviceY | ('key' : KeyA , 'unlocked' : false , ..) > .
eq < cloudA | (UserX : ('devices' : nils , 'members' : SetA , ..) , ...) > $ UserX 'callAPI:invite' cloudA | (UserY) 
= < cloudA | (UserX : ('devices' : nils , 'members' : (SetA , UserY) , ..) , ...) > .
eq < cloudA | (UserX : ('devices' : nils , 'members' : (SetA , UserY) , ..) , ...) > $ UserX 'callAPI:kick' cloudA | (UserY) 
= < cloudA | (UserX : ('devices' : nils , 'members' : SetA , ..) , ...) > .
eq < cloudA | (DeviceY : ('key' : KeyA , ..) , ...) > < UserX | ('members' : (SetA , UserY) , ....) > $ UserY 'cloudAPI:getKey' cloudA | (DeviceY) < UserY | ('key' : KeyA , .....) > 
= < cloudA | (DeviceY : ('key' : KeyA , ..) , ...) > < UserX | ('members' : (SetA , UserY) , ....) > < UserY | ('key' : KeyA , .....) > .
eq < DeviceY | ('key' : KeyA , ..) > $ UserX 'callAPI:bind' cloudA | (DeviceY ; KeyA) < cloudA | (DeviceY : ('owner' : SetA , ...) , ....) >  *** after human fix one attribute value
= < cloudA | (DeviceY : ('owner' : (SetA , UserX) , ...) , ....) > < DeviceY | ('key' : KeyA , ..) > .
*** eq < DeviceY | ('key' : KeyA , ..) > $ UserX 'callAPI:bind' cloudA | (DeviceY ; KeyA) < cloudA | (DeviceY : ('owner' : UserX , ...) , ....) > *** original false positive
*** = < cloudA | (DeviceY : ('owner' : UserX , ...) , ....) > < DeviceY | ('key' : KeyA , ..) > .
endm

mod TRANSITION is
including SYSTEM .
var E : Event .
var S : Soup .
vars .. ... .... ..... ...... ....... : Set .
vars N : Nat .
vars UserX : User .
vars KeyA : Qid .
vars SetA : Set .
vars DeviceY : Device .
vars FreshKeyB : Qid .
vars UserY : User .
*** events type declaration
ops ev1 : User Device -> Event .
ops ev2 : User Device -> Event .
ops ev3 : User Device Qid -> Event .
ops ev4 : User Device Qid -> Event .
ops ev5 : User Device -> Event .
ops ev6 : User User -> Event .
ops ev7 : User User -> Event .
ops ev8 : User Device -> Event .
ops ev9 : User Device -> Event .
*** events
eq ev1(UserX, DeviceY) = $ UserX 'pressButton' DeviceY .
eq ev2(UserX, DeviceY) = $ UserX 'callAPI:getKey' DeviceY .
eq ev3(UserX, DeviceY, KeyA) = $ UserX 'callAPI:lock' DeviceY | (KeyA) .
eq ev4(UserX, DeviceY, KeyA) = $ UserX 'callAPI:bind' cloudA | (DeviceY ; KeyA) .
eq ev5(UserY, DeviceY) = $ UserY 'cloudAPI:getKey' cloudA | (DeviceY) .
eq ev6(UserX, UserY) = $ UserX 'callAPI:invite' cloudA | (UserY) .
eq ev7(UserX, UserY) = $ UserX 'callAPI:kick' cloudA | (UserY) .
eq ev8(UserX, DeviceY) = $ UserX 'leaves' DeviceY .
eq ev9(UserX, DeviceY) = $ UserX 'approaches' DeviceY .
*** transitions
rl [rev1]: E @ S < UserX | ('localTo' : DeviceY , ..) > 
=> ep: ev1(UserX, DeviceY) @ S < UserX | ('localTo' : DeviceY , ..) > .
rl [rev2]: E @ S < UserX | ('localTo' : DeviceY , ..) > 
=> ep: ev2(UserX, deviceB) @ S < UserX | ('localTo' : DeviceY , ..) > .
rl [rev3]: E @ S < UserX | ('key' : KeyA , 'localTo' : DeviceY , ..) > 
=> ep: ev3(UserX, deviceB, KeyA) @ S < UserX | ('key' : KeyA , 'localTo' : DeviceY , ..) > .
rl [rev4]: E @ S < UserX | ('key' : KeyA , ..) > < DeviceY | ... > 
=> ep: ev4(UserX, DeviceY, KeyA) @ S < UserX | ('key' : KeyA , ..) > < DeviceY | ... > .
rl [rev5]: E @ S < UserY | ('key' : KeyA , ..) > < DeviceY | ... > 
=> ep: ev5(UserY, DeviceY) @ S < UserY | ('key' : KeyA , ..) > < DeviceY | ... > .
rl [rev6]: E @ S  
=> ep: ev6(userC, userA) @ S  .
rl [rev7]: E @ S  
=> ep: ev7(userC, userA) @ S  .
rl [rev8]: E @ S < UserX | ('localTo' : DeviceY , ..) > 
=> ep: ev8(UserX, DeviceY) @ S < UserX | ('localTo' : DeviceY , ..) > .
rl [rev9]: E @ S < UserX | ('localTo' : nils , ..) > 
=> ep: ev9(UserX, deviceB) @ S < UserX | ('localTo' : nils , ..) > .

endm
