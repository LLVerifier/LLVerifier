load ../lib/Iot .
mod SYSTEM is
protecting Iot .
eq init = idle @ < deviceLock | ('trustSet' : (cloudB) , 'state' : false) > < cloudB | (deviceLock : ('trustSet' : cloudSmartThing , 'key' : 'secret' , 'state' : false)) > < cloudSmartThing | (deviceSwitch : ('key' : 'secret' , 'state' : false , 'trustSet' : userA , 'boundTo' : deviceLock)) > < userA | ('key' : nils) > < userC | ('key' : nils) > < deviceSwitch | 'state' : false > . *** 1

vars .. ... .... ..... ...... ....... : Set .

*** variables
vars N : Nat .
vars KeyA : Qid .
vars DeviceX : Device .
vars PrincipalX : Principal .
vars UserX : User .
vars UserZ : User .
vars CloudX : Cloud .
vars DeviceY : Device .
vars UserY : User .
*** policy
eq < deviceLock | ('trustSet' : (PrincipalX , ..) , 'state' : false , ...) > $ PrincipalX 'callAPI:toggle' deviceLock 
= < deviceLock | ('trustSet' : (PrincipalX , ..) , 'state' : true , ...) > .
eq < CloudX | (DeviceY : ('trustSet' : (PrincipalX , ..) , 'state' : false , ...) , ....) > $ PrincipalX 'callAPI:toggle' DeviceY 
= < CloudX | (DeviceY : ('trustSet' : (PrincipalX , ..) , 'state' : true , ...) , ....) > $ CloudX 'callAPI:toggle' DeviceY .
eq < cloudSmartThing | (DeviceX : ('boundTo' : DeviceY , ..) , ...) > $ cloudSmartThing 'callAPI:toggle' DeviceX 
= < cloudSmartThing | (DeviceX : ('boundTo' : DeviceY , ..) , ...) > $ cloudSmartThing 'callAPI:toggle' DeviceY .
eq < CloudX | (DeviceY : ('trustSet' : (UserX , ..) , 'key' : KeyA , ...) , ....) > $ UserX 'callAPI:getKey' CloudX 
= < CloudX | (DeviceY : ('trustSet' : (UserX , ..) , 'key' : KeyA , ...) , ....) > $ CloudX 'sendKey' UserX | (KeyA) .
eq < UserX | ('key' : nils , ..) > $ CloudX 'sendKey' UserX | (KeyA) 
= < UserX | ('key' : KeyA , ..) > .
eq < CloudX | (DeviceY : ('trustSet' : (UserX , ..) , ...) , ....) > $ UserX 'callAPI:delegate' CloudX | (UserZ ; DeviceY) 
= < CloudX | (DeviceY : ('trustSet' : (UserX , UserZ , ..) , ...) , ....) > .
eq < CloudX | (DeviceY : ('trustSet' : (UserX , UserY , ..) , ...) , ....) > $ UserX 'callAPI:revoke' CloudX | (UserY ; DeviceY) 
= < CloudX | (DeviceY : ('trustSet' : (UserX , ..) , ...) , ....) > .
eq < cloudSmartThing | (DeviceX : ('key' : KeyA , 'state' : false , ..) , ...) > $ UserX 'callAPI:cloudAPI:toggle' cloudSmartThing | (DeviceX ; KeyA) 
= < cloudSmartThing | (DeviceX : ('key' : KeyA , 'state' : true , ..) , ...) > $ cloudSmartThing 'callAPI:toggle' DeviceX .
endm

mod TRANSITION is
including SYSTEM .
var E : Event .
var S : Soup .
vars .. ... .... ..... ...... ....... : Set .
vars N : Nat .
vars KeyA : Qid .
vars DeviceX : Device .
vars PrincipalX : Principal .
vars UserX : User .
vars UserZ : User .
vars CloudX : Cloud .
vars DeviceY : Device .
vars UserY : User .
*** events type declaration
ops ev1 : User Cloud -> Event .
ops ev2 : User Cloud User Device -> Event .
ops ev3 : User Cloud User Device -> Event .
ops ev4 : User Device Qid -> Event .
ops ev5 : Principal Device -> Event .
*** events
eq ev1(UserX, CloudX) = $ UserX 'callAPI:getKey' CloudX .
eq ev2(UserX, CloudX, UserZ, DeviceY) = $ UserX 'callAPI:delegate' CloudX | (UserZ ; DeviceY) .
eq ev3(UserX, CloudX, UserY, DeviceY) = $ UserX 'callAPI:revoke' CloudX | (UserY ; DeviceY) .
eq ev4(UserX, DeviceX, KeyA) = $ UserX 'callAPI:cloudAPI:toggle' cloudSmartThing | (DeviceX ; KeyA) .
eq ev5(PrincipalX, DeviceY) = $ PrincipalX 'callAPI:toggle' DeviceY .
*** transitions
rl [rev1]: E @ S < UserX | .. > < CloudX | ... > 
=> ep: ev1(UserX, CloudX) @ S < UserX | .. > < CloudX | ... > .
rl [rev2]: E @ S < UserX | .. > < CloudX | ... > < UserZ | .... > < DeviceY | ..... > 
=> ep: ev2(UserX, CloudX, UserZ, DeviceY) @ S < UserX | .. > < CloudX | ... > < UserZ | .... > < DeviceY | ..... > .
rl [rev3]: E @ S < UserX | .. > < CloudX | ... > < UserY | .... > < DeviceY | ..... > 
=> ep: ev3(UserX, CloudX, UserY, DeviceY) @ S < UserX | .. > < CloudX | ... > < UserY | .... > < DeviceY | ..... > .
rl [rev4]: E @ S < UserX | ('key' : KeyA , ..) > < DeviceX | ... > 
=> ep: ev4(UserX, DeviceX, KeyA) @ S < UserX | ('key' : KeyA , ..) > < DeviceX | ... > .
rl [rev5]: E @ S < UserX | .. > < DeviceY | ... > 
=> ep: ev5(UserX , DeviceY) @ S < UserX | .. > < DeviceY | ... > .

endm
