load rules .
load model-checker .
mod PREDS is
pr TRANSITION * (sort State to State') .
including SATISFACTION .
pr BOOL-OPS .

subsort Vertex < State .

vars N : Nat .
vars PrincipalA : Principal .
vars KeyA : Qid .
vars Act : Action .
vars DeviceY : Device .
var Vtx : Vertex .
var P : Prop .
var E : Event .
var S : Soup .
vars .. ... .... ..... ...... ....... : Set .

ops boundReached : -> Prop .
*** generated type declarations
ops ap1  ap2  ap3  ap4  ap5  ap6  ap7  : -> Prop .

*** proposition comment
*** ap1 : userA presses the button
*** ap2 : userA calls cloud's API 'callApi:Bind'
*** ap3 : cloud records userA is the owner of deviceB
*** ap4 : userA takes operations
*** ap5 : userC performs operations
*** ap6 : userC is local to deviceB
*** ap7 : userC is the owner of deviceB

*** generated propositions
ceq E @ S  |= ap1 = true if subject(E) == userA and action(E) == 'pressButton' .
ceq E @ S  |= ap2 = true if subject(E) == userA and action(E) == 'callAPI:bind' and object(E) == cloudA .
eq E @ S < cloudA | (deviceB : ('owner' : userA , ..) , ...) > |= ap3 = true  .
ceq E @ S  |= ap4 = true if subject(E) == userA .
ceq E @ S  |= ap5 = true if subject(E) == userC .
eq E @ S < userC | ('localTo' : deviceB , ..) > |= ap6 = true  .
eq E @ S < cloudA | (deviceB : ('owner' : userC , ..) , ...) > |= ap7 = true  .

*** predfeined
ceq E @ S < system | 'counter' : N , ... >  |= boundReached = true if N >= 5 . *** Max turns number
ceq E @ S < system | 'time' : N , ... >  |= boundReached = true if N >= 3 . *** time pass

eq Vtx |= P = false [owise] .

endm

mod CHECK is
pr PREDS .
including MODEL-CHECKER .

ops spec basic fairness : -> Prop .

eq basic = [] (~ boundReached) .

eq fairness = 
[](ap1 -> O (ap5 W ap2))
/\ [](ap3 -> ~ O ap4)
\/ [](ap5 -> O ap5)
/\ <> (~ ap6 /\ ~ ap7 /\ O (~ ap6 /\ ap7)) .

*** security property specification
eq spec = O ~ (fairness /\ basic) .
endm

load ../lib/postProcess .
