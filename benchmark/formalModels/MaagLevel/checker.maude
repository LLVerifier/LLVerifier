load rules .
load model-checker .
mod PREDS is
pr TRANSITION * (sort State to State') .
including SATISFACTION .
pr BOOL-OPS .

subsort Vertex < State .

vars N : Nat .
vars Act : Action .
vars PrincipalA : Principal .
vars ArgumentsA : List .
var Vtx : Vertex .
var P : Prop .
var E : Event .
var S : Soup .
vars .. ... .... ..... ...... ....... : Set .

ops boundReached sp : -> Prop .
*** generated type declarations
ops ap1  ap2  ap3  ap4  ap5 ap6 : -> Prop .

*** proposition comment
*** ap1 : userA performs operations
*** ap2 : userC performs operations
*** ap3 : deviceB trusts userC
*** ap4 : cloudA records that deviceB trusts userC

*** generated propositions
ceq E @ S  |= ap1 = true if subject(E) == userA .
ceq E @ S  |= ap2 = true if subject(E) == userC .
eq E @ S < deviceB | ('trustSet' : (userC , ..) , ...) > |= ap3 = true  .
eq E @ S < cloudA | (deviceB : ('trustSet' : (userC , ....) , ..) , ...) > |= ap4 = true  . ***
ceq E @ S  |= ap5 = true if subject(E) == userA and action(E) == 'callAPI:share' . ***
ceq E @ S  |= ap6 = true if subject(E) == userA and action(E) == 'callAPI:revoke' . ***

*** predefined
ceq E @ S  |= sp = true if subject(E) == system . *** system performs actions
ceq E @ S < system | 'counter' : N , ... >  |= boundReached = true if N >= 5 . *** Max turns number
ceq E @ S < system | 'time' : N , ... >  |= boundReached = true if N >= 3 . *** time pass

eq Vtx |= P = false [owise] .

endm

mod CHECK is
pr PREDS .
including MODEL-CHECKER .

ops spec basic fairness : -> Prop .

eq basic = [] (~ boundReached /\ ~ sp) .

eq fairness = 
 [](ap5 -> O (ap2 W ap6))
 /\ [](O ap6 -> ~ ap1)
 /\ <> (~ ap3 /\ ~ ap4 /\ O (ap3 /\ ~ ap4)) .
 
*** security property specification
eq spec = O ~ (fairness /\ basic) .
endm

load ../lib/postProcess .
