Initially, userA is local to deviceB and has the key 'secretA', while userC is not local to deviceB and possesses the key 'secretC'. The cloudA records deviceB's information, with its binding key as '' and its owner as an empty set. DeviceB is not pressed and its key is an empty set.

If a user is not local to a device and approaches the device, the user will become local to it. Conversely, if a user is local to a device and leaves it, the user will become remote to the device. If a user presses the button on a device, the device records that it has been pressed. When a device is pressed without a key, and a user calls the device API 'callAPI:setKey', the device will change its state to not pressed, record the new key, call cloudA's API 'callAPI:setKey' with the new binding key as an argument, and update its state to reflect that it now has a key. If a device that already has a key is pressed and a user calls 'callAPI:setKey', the device will again change its state to not pressed, record the new key, and call cloudA's API 'callAPI:setKey' with the new binding key. Upon receiving a 'callAPI:setKey' event from any device, cloudA updates its binding key record for that device. When a user calls 'callAPI:bind' with the device and binding key as arguments to cloudA, and the binding key matches the record in cloudA, cloudA updates the owner from an empty set to the user. If a device that already has a key is pressed and a user calls 'callAPI:getKey', the device will change its state to not pressed and trigger an event to send its key to the user. Should a device send a user a key and the user already knows a key, the user will update their key with the new one. If a device has an owner, any user can call 'callAPI:reset' on cloudA with the device and binding key matching cloudA's record, resetting the owner to an empty set and setting the binding key to empty.

If a user is local to a device, the user can press the device button, call the device's API 'callAPI:getKey', or use their key to call any device's API 'callAPI:setKey'. If the user has a key, they can use it to call cloudA's API 'callAPI:bind' or 'callAPI:reset'. When a user is local to a device, they can leave the device, and when a user is not local to a device, they can approach it.

[properties]
The userA will always take operations in the order (press button, call device's API 'callAPI:setKey', and call cloud's 'callAPI:bind') until reset. 
If the userA is the owner of deviceB, userA will not take any operations in the next time point.
If in the next point, userA reset the deviceB, the userA calls 'callAPI:bind' and is not the owner of deviceB.
If reset happens, the userA will eventually press the button of deviceB.
In the meantime, the userC can perform any operations between or after the userA.
Eventually, there is a time point that userC is not local to deviceB and is not the owner of deviceB, and the next time userC is not local and the owner of deviceB.
